\directlua{require("myround.lua")} % Load the externally-stored code
\directlua{require("stats.lua")} % Load the externally-stored code

\newcommand\calc[2][0]{% default value of opt. param.: 0
   \num{\directlua{tex.sprint(math.myround(#2,#1))}}}

\newcommand\calccs[2][3]{% default value of opt. param.: 3
   \num{\directlua{tex.sprint(math.myroundcs(#2,#1))}}}

\newcommand\calcps[2][0]{% default value of opt. param.: 0
   \num{\directlua{tex.sprint(math.myroundps(#2,#1))}}}

\newcommand\calccsi[2][2]{% default value of opt. param.: 2, special rounding for uncs
   \num{\directlua{tex.sprint(math.myroundcsi(#2,#1))}}}

\newcommand\calcsc[2][3]{% default value of opt. param.: 3
   \num{\directlua{tex.sprint(math.myroundsc(#2,#1))}}}

\newcommand\calcscps[2][0]{% default value of opt. param.: 0
   \num{\directlua{tex.sprint(math.myroundscps(#2,#1))}}}

\newcommand\calcsci[2][2]{% default value of opt. param.: 2, special rounding for uncs
   \num{\directlua{tex.sprint(math.myroundsci(#2,#1))}}}

\newcommand\calcODG[1]{%
    \def\odgpow{\directlua{tex.sprint(math.ODGpow(#1))}}%
    \ifthenelse{\equal{\odgpow}{0}}{\num{1}}{\ifthenelse{\equal{\odgpow}{1}}{\num{10}}{\num{e\directlua{tex.sprint(math.ODGpow(#1))}}}}}

\newcommand\qtycalc[3][0]{\qty{\directlua{tex.sprint(math.myround(#2,#1))}}{#3}}
\newcommand\qtyccs[3][3]{\qty{\directlua{tex.sprint(math.myroundcs(#2,#1))}}{#3}}
\newcommand\qtycps[3][0]{\qty{\directlua{tex.sprint(math.myroundps(#2,#1))}}{#3}}
\newcommand\qtycsc[3][3]{\qty{\directlua{tex.sprint(math.myroundsc(#2,#1))}}{#3}}
\newcommand\qtycscps[3][0]{\qty{\directlua{tex.sprint(math.myroundscps(#2,#1))}}{#3}}
\newcommand\qtyauto[3][3]{\qty{\directlua{tex.sprint(myautoqtya(#2,#1))}}{\directlua{tex.sprint(myautoqtyb(#2,#1))}#3}}
\newcommand\qtyautops[3][0]{\qty{\directlua{tex.sprint(myautoqtyaps(#2,#1))}}{\directlua{tex.sprint(myautoqtybps(#2,#1))}#3}}
\newcommand\qtyODG[2]{%
    \def\odgpow{\directlua{tex.sprint(math.ODGpow(#1))}}%
    \ifthenelse{\equal{\odgpow}{0}}{\qty{1}{#2}}{\ifthenelse{\equal{\odgpow}{1}}{\qty{10}{#2}}{\qty{e\directlua{tex.sprint(math.ODGpow(#1))}}{#2}}}}
\newcommand\qtyODGauto[2]{%
    \def\odgpow{\directlua{tex.sprint(math.ODGpow(myautoqtya(#1,2)))}}%
    \ifthenelse{\equal{\odgpow}{0}}{\qty{1}{\directlua{tex.sprint(myautoqtyb(#1,2))}#2}}{\ifthenelse{\equal{\odgpow}{1}}{\qty{10}{\directlua{tex.sprint(myautoqtyb(#1,2))}#2}}{\qty{e\directlua{tex.sprint(math.ODGpow(myautoqtya(#1,2)))}}{\directlua{tex.sprint(myautoqtyb(#1,2))}#2}}}}

% to compute uncs
\newcommand\qtyccsi[3][2]{\qty{\directlua{tex.sprint(math.myroundcsi(#2,#1))}}{#3}}
\newcommand\qtycsci[3][2]{\qty{\directlua{tex.sprint(math.myroundsci(#2,#1))}}{#3}}
\newcommand\qtyautoi[3][2]{\qty{\directlua{tex.sprint(myautoqtyai(#2,#1))}}{\directlua{tex.sprint(myautoqtyb(#2,#1))}#3}}

% to get normalized values printing given computed unc with (a pm b) unit
\newcommand\qtyupmccs[4][2]{\ensuremath{\ifthenelse{\equal{#4}{}}{}{(}\calccs[myNcsByUnc(#2,#3)-1+#1]{#2}\pm\calccsi[#1]{#3}\ifthenelse{\equal{#4}{}}{}{)\usp\U{#4}}}}
\newcommand\qtyupmcsc[4][2]{\ensuremath{\ifthenelse{\equal{#4}{}}{}{(}\calcsc[myNcsByUnc(#2,#3)-1+#1]{#2}\pm\calcsci[#1]{#3}\ifthenelse{\equal{#4}{}}{}{)\usp\U{#4}}}}
\newcommand\qtyupmauto[4][2]{\ensuremath{\ifthenelse{\equal{#4}{}}{}{(}\num{\directlua{tex.sprint(myautoqtya(#2,myNcsByUnc(#2,#3)-1+#1))}}\pm\num{\directlua{tex.sprint(myautoqtyaUnc(#3, #2, #1))}}\ifthenelse{\equal{#4}{}}{}{)\usp\U{\directlua{tex.sprint(myautoqtyb(#2,myNcsByUnc(#2,#3)-1+#1))}#4}}}}

% to get normalized values printing given computed unc with a (b) unit
\newcommand\qtyuparccs[4][2]{\ensuremath{\calccs[myNcsByUnc(#2,#3)-1+#1]{#2}\,(\calccsi[#1]{#3*10^(#1-1-math.floor(math.log10(math.abs(#3))))})\ifthenelse{\equal{#4}{}}{}{\usp}{\U{#4}}}}
\newcommand\qtyuparcsc[4][2]{\ensuremath{\num{\directlua{tex.sprint(myautoqtya(#2*10^(-math.floor(math.log10(math.abs(#2)))),myNcsByUnc(#2,#3)-1+#1))}}\,(\calccsi[#1]{#3*10^(#1-1-math.floor(math.log10(math.abs(#3))))})%
\ifthenelse{\equal{\directlua{tex.sprint(math.floor(math.log10(math.abs(#2))))}}{0}}{}{\myproductsign10^\directlua{tex.sprint(math.floor(math.log10(math.abs(#2))))}}%
\ifthenelse{\equal{#4}{}}{}{\usp}{\U{#4}}}}
\newcommand\qtyuparauto[4][2]{\ensuremath{\num{\directlua{tex.sprint(myautoqtya(#2,myNcsByUnc(#2,#3)-1+#1))}}\,(\calccsi[#1]{#3*10^(#1-1-math.floor(math.log10(math.abs(#3))))})\ifthenelse{\equal{#4}{}}{}{\usp}{\U{\directlua{tex.sprint(myautoqtyb(#2,myNcsByUnc(#2,#3)-1+#1))}#4}}}}

% set default
\def\qtyuccs{\qtyupmccs}
\def\qtyucsc{\qtyupmcsc}
\def\qtyuauto{\qtyupmauto}
